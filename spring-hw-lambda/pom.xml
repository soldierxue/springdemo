<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>springboot</groupId>
  <artifactId>spring-hw-lambda</artifactId>
  <packaging>jar</packaging>
  <version>1.0</version>
  <name>spring-hw-lambda</name>
  <url>https://github.com/soldierxue/springdemo</url>  
   <properties>
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     <commons-logging.version>1.2</commons-logging.version> 
     <springboot.version>1.5.3.RELEASE</springboot.version>
   </properties> 
    
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <type>pom</type>
                <version>${springboot.version}</version>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
   
  <dependencies>
   <!-- Spring Boot web依赖 -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>   
    <!-- AWS Lambda dependencies -->      
    <dependency>
        <groupId>com.amazonaws</groupId>
        <artifactId>aws-lambda-java-core</artifactId>
        <version>1.1.0</version>
    </dependency>

    <dependency>
        <groupId>com.amazonaws</groupId>
        <artifactId>aws-lambda-java-log4j</artifactId>
        <version>1.0.0</version>
    </dependency>
    <dependency>
        <groupId>commons-logging</groupId>
        <artifactId>commons-logging</artifactId>
        <version>${commons-logging.version}</version>
    </dependency>
    <!-- Good old JUnit for testing -->  
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
      
  </dependencies>
  <build>
      <!--
        <filters>
            <filter>application-${build.profile.id}.properties</filter>
        </filters>    
  -->
		<plugins>
			<!-- Package as an executable jar/war -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                	<!-- Does not bundle a bootstrap loader. (e.g. classes and libs are not loaded into a BOOT-INF directory
                	Pre version 1.4.0.RELEASE of Spring Boot - this was default but if you do not specify this layout for version 1.4.0.RELEASE
                	going forward - you will get a class not found exception when trying to invoke a handler from Amazon Lambda -->
					<layout>MODULE</layout>
				</configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>                
			</plugin>
		</plugins>
	</build>    
</project>
